// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace XWorld.DataConfig
{
    using UnityEngine;
    using System.Collections.Generic;
    using System;
    
    
    public class item_itemdata : System.ICloneable
    {
        
        public int itemid;
        
        public string des;
        
        public int nameid;
        
        public int desid;
        
        public int type;
        
        public int subtype;
        
        public int level;
        
        public int vocation;
        
        public int sex;
        
        public int minlevel;
        
        public int maxlevel;
        
        public int maxnum;
        
        public int limitunm;
        
        public int usecount;
        
        public int ruleid;
        
        public int skillid;
        
        public int skilluserdata;
        
        public int buybackprice;
        
        public int buybackprice_bindgold;
        
        public int sellprice;
        
        public int sellprice_bindgold;
        
        public int lootresid;
        
        public int commoncheckgroupid;
        
        public int validtime;
        
        public int invalidtime;
        
        public int validtime_mode;
        
        public int offline_time_mode;
        
        public int broadcasttype0;
        
        public int broadcastmode0;
        
        public int broadcastid0;
        
        public int broadcastrepeat0;
        
        public int broadcastparam0;
        
        public int soundindex;
        
        public string icon;
        
        public object Clone()
        {
            return this.MemberwiseClone();;
        }
    }
    
    public class Tableitem_itemdata : XWorld.DataConfig.TableBase
    {
        
        public List<item_itemdata> m_configList = new List<item_itemdata>();
        
        public void LoadData(XWorld.DataConfig.item_itemdata codeValue)
        {
            m_configList.Add(codeValue);
        }
        
        public int GetRowCount()
        {
            return 34;
        }
        
        public int GetDataCount()
        {
            if (m_configList == null)
            {
                return 0;
            }
            return m_configList.Count;
        }
        
        public item_itemdata GetData(int rowIdx)
        {
            if (m_configList != null && rowIdx >= 0 && rowIdx < m_configList.Count)
            {
                return m_configList[rowIdx];
            }
            return null;
        }
        
        public override void LoadData(string content)
        {
            string[] values = content.Split("\r"[0]);
            for (int i = 2; (i < values.Length); i = (i + 1))
            {
                item_itemdata data = new item_itemdata();
                int j = 0;
                string[] subValues = values[i].TrimStart('\n').Split(ClientConfigManager.CMD_STRING, StringSplitOptions.None);
                if (subValues != null && subValues.Length == GetRowCount())
                {
                    data.itemid = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.des = (subValues[j]);
                    j = j + 1;
                    data.nameid = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.desid = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.type = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.subtype = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.level = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.vocation = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.sex = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.minlevel = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.maxlevel = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.maxnum = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.limitunm = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.usecount = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.ruleid = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.skillid = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.skilluserdata = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.buybackprice = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.buybackprice_bindgold = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.sellprice = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.sellprice_bindgold = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.lootresid = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.commoncheckgroupid = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.validtime = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.invalidtime = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.validtime_mode = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.offline_time_mode = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.broadcasttype0 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.broadcastmode0 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.broadcastid0 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.broadcastrepeat0 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.broadcastparam0 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.soundindex = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.icon = (subValues[j]);
                    j = j + 1;
                    m_configList.Add(data);
                }
            }
        }
    }
}
