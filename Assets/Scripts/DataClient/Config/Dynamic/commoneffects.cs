// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace XWorld.DataConfig
{
    using UnityEngine;
    using System.Collections.Generic;
    using System;
    
    
    public class commoneffects : System.ICloneable
    {
        
        public int effectid;
        
        public string bindbone;
        
        public int controlType;
        
        public string particle;
        
        public float scale;
        
        public float lifetime;
        
        public int sound;
        
        public int type;
        
        public int dir;
        
        public int needpreload;
        
        public object Clone()
        {
            return this.MemberwiseClone();;
        }
    }
    
    public class Tablecommoneffects : XWorld.DataConfig.TableBase
    {
        
        public List<commoneffects> m_configList = new List<commoneffects>();
        
        public void LoadData(XWorld.DataConfig.commoneffects codeValue)
        {
            m_configList.Add(codeValue);
        }
        
        public int GetRowCount()
        {
            return 10;
        }
        
        public int GetDataCount()
        {
            if (m_configList == null)
            {
                return 0;
            }
            return m_configList.Count;
        }
        
        public commoneffects GetData(int rowIdx)
        {
            if (m_configList != null && rowIdx >= 0 && rowIdx < m_configList.Count)
            {
                return m_configList[rowIdx];
            }
            return null;
        }
        
        public override void LoadData(string content)
        {
            string[] values = content.Split("\r"[0]);
            for (int i = 2; (i < values.Length); i = (i + 1))
            {
                commoneffects data = new commoneffects();
                int j = 0;
                string[] subValues = values[i].TrimStart('\n').Split(ClientConfigManager.CMD_STRING, StringSplitOptions.None);
                if (subValues != null && subValues.Length == GetRowCount())
                {
                    data.effectid = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.bindbone = (subValues[j]);
                    j = j + 1;
                    data.controlType = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.particle = (subValues[j]);
                    j = j + 1;
                    data.scale = ClientConfigManager.ToSingle(subValues[j]);
                    j = j + 1;
                    data.lifetime = ClientConfigManager.ToSingle(subValues[j]);
                    j = j + 1;
                    data.sound = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.type = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.dir = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.needpreload = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    m_configList.Add(data);
                }
            }
        }
    }
}
