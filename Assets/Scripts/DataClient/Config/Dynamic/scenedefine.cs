// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace XWorld.DataConfig
{
    using UnityEngine;
    using System.Collections.Generic;
    using System;
    
    
    public class scenedefine : System.ICloneable
    {
        
        public int ID;
        
        public string Des;
        
        public int ShowName;
        
        public string LevelName;
        
        public int NextSceneID;
        
        public int BornData;
        
        public int MapType;
        
        public int CopyChallTempID;
        
        public int NpcAutoLevelStep;
        
        public int TOD;
        
        public int CDResetCount;
        
        public int CDResetMode;
        
        public int CDResetHour;
        
        public int ParallelCnt;
        
        public int LoadValue;
        
        public int PlayerMax;
        
        public int CloseTime;
        
        public int KeepTime;
        
        public int SceneAttributes;
        
        public int SizeX;
        
        public int SizeY;
        
        public int BlockSize;
        
        public string WorldSceneClass;
        
        public string NodeSceneClass;
        
        public int ReliveTime;
        
        public int ReliveFlags;
        
        public int DeadFlags;
        
        public int GameFuncMask;
        
        public int EnterQuestFollowState;
        
        public int FinishMask;
        
        public string Name;
        
        public int secondsToSyncDB;
        
        public int ActivityInfo;
        
        public int TeamRule;
        
        public int ForceEnter;
        
        public int KeepOnVehicle;
        
        public int TipsInType;
        
        public int TipsInTxt;
        
        public int Save;
        
        public int TokenType;
        
        public int TokenAttr;
        
        public int TokenTime;
        
        public int TokenName;
        
        public int TokenDes;
        
        public int TokenCltCond;
        
        public int TokenNodeCond;
        
        public int TokenWorldCond;
        
        public string XmlLoader;
        
        public object Clone()
        {
            return this.MemberwiseClone();;
        }
    }
    
    public class Tablescenedefine : XWorld.DataConfig.TableBase
    {
        
        public List<scenedefine> m_configList = new List<scenedefine>();
        
        public void LoadData(XWorld.DataConfig.scenedefine codeValue)
        {
            m_configList.Add(codeValue);
        }
        
        public int GetRowCount()
        {
            return 48;
        }
        
        public int GetDataCount()
        {
            if (m_configList == null)
            {
                return 0;
            }
            return m_configList.Count;
        }
        
        public scenedefine GetData(int rowIdx)
        {
            if (m_configList != null && rowIdx >= 0 && rowIdx < m_configList.Count)
            {
                return m_configList[rowIdx];
            }
            return null;
        }
        
        public override void LoadData(string content)
        {
            string[] values = content.Split("\r"[0]);
            for (int i = 2; (i < values.Length); i = (i + 1))
            {
                scenedefine data = new scenedefine();
                int j = 0;
                string[] subValues = values[i].TrimStart('\n').Split(ClientConfigManager.CMD_STRING, StringSplitOptions.None);
                if (subValues != null && subValues.Length == GetRowCount())
                {
                    data.ID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.Des = (subValues[j]);
                    j = j + 1;
                    data.ShowName = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.LevelName = (subValues[j]);
                    j = j + 1;
                    data.NextSceneID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.BornData = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MapType = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.CopyChallTempID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.NpcAutoLevelStep = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.TOD = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.CDResetCount = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.CDResetMode = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.CDResetHour = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.ParallelCnt = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.LoadValue = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.PlayerMax = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.CloseTime = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.KeepTime = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.SceneAttributes = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.SizeX = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.SizeY = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.BlockSize = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.WorldSceneClass = (subValues[j]);
                    j = j + 1;
                    data.NodeSceneClass = (subValues[j]);
                    j = j + 1;
                    data.ReliveTime = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.ReliveFlags = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.DeadFlags = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.GameFuncMask = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.EnterQuestFollowState = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.FinishMask = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.Name = (subValues[j]);
                    j = j + 1;
                    data.secondsToSyncDB = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.ActivityInfo = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.TeamRule = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.ForceEnter = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.KeepOnVehicle = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.TipsInType = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.TipsInTxt = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.Save = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.TokenType = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.TokenAttr = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.TokenTime = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.TokenName = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.TokenDes = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.TokenCltCond = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.TokenNodeCond = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.TokenWorldCond = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.XmlLoader = (subValues[j]);
                    j = j + 1;
                    m_configList.Add(data);
                }
            }
        }
    }
}
