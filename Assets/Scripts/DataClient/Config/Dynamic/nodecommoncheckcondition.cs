// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace XWorld.DataConfig
{
    using UnityEngine;
    using System.Collections.Generic;
    using System;
    
    
    public class nodecommoncheckcondition : System.ICloneable
    {
        
        public int GroupIdx;
        
        public int ID;
        
        public string Des;
        
        public string ConditionName;
        
        public string ParamString;
        
        public int CmpType;
        
        public int SuccResult;
        
        public int FailResult;
        
        public int IsNot;
        
        public int FailTip;
        
        public object Clone()
        {
            return this.MemberwiseClone();;
        }
    }
    
    public class Tablenodecommoncheckcondition : XWorld.DataConfig.TableBase
    {
        
        public List<nodecommoncheckcondition> m_configList = new List<nodecommoncheckcondition>();
        
        public void LoadData(XWorld.DataConfig.nodecommoncheckcondition codeValue)
        {
            m_configList.Add(codeValue);
        }
        
        public int GetRowCount()
        {
            return 10;
        }
        
        public int GetDataCount()
        {
            if (m_configList == null)
            {
                return 0;
            }
            return m_configList.Count;
        }
        
        public nodecommoncheckcondition GetData(int rowIdx)
        {
            if (m_configList != null && rowIdx >= 0 && rowIdx < m_configList.Count)
            {
                return m_configList[rowIdx];
            }
            return null;
        }
        
        public override void LoadData(string content)
        {
            string[] values = content.Split("\r"[0]);
            for (int i = 2; (i < values.Length); i = (i + 1))
            {
                nodecommoncheckcondition data = new nodecommoncheckcondition();
                int j = 0;
                string[] subValues = values[i].TrimStart('\n').Split(ClientConfigManager.CMD_STRING, StringSplitOptions.None);
                if (subValues != null && subValues.Length == GetRowCount())
                {
                    data.GroupIdx = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.ID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.Des = (subValues[j]);
                    j = j + 1;
                    data.ConditionName = (subValues[j]);
                    j = j + 1;
                    data.ParamString = (subValues[j]);
                    j = j + 1;
                    data.CmpType = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.SuccResult = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.FailResult = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.IsNot = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.FailTip = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    m_configList.Add(data);
                }
            }
        }
    }
}
