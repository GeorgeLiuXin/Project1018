// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace XWorld.DataConfig
{
    using UnityEngine;
    using System.Collections.Generic;
    using System;
    
    
    public class skilldata : System.ICloneable
    {
        
        public int SkillID;
        
        public string Des;
        
        public int MSV_SkillType;
        
        public float MSV_SrcCheck;
        
        public int MSV_TarCheck;
        
        public int MSV_BaseSkillID;
        
        public int MSV_SkillAttr;
        
        public int MSV_TriggerType;
        
        public int MSV_TriggerCheck;
        
        public int MSV_TriggerNotify;
        
        public int MSV_TriggerDataID;
        
        public int MSV_TriggerValue;
        
        public int MSV_TriggerProbability;
        
        public int MSV_SpellLogic;
        
        public int MSV_SpellParam1;
        
        public int MSV_SpellParam2;
        
        public int MSV_SpellParam3;
        
        public int MSV_TarSeclect;
        
        public int MSV_TarType;
        
        public int MSV_TarLogic;
        
        public float MSV_Range;
        
        public float MSV_Angle;
        
        public int MSV_LockTime;
        
        public int MSV_LastTime;
        
        public int MSV_EffectTime;
        
        public int MSV_EffectCount;
        
        public int MSV_CDGroup;
        
        public int MSV_CDTime;
        
        public int MSV_CostType1;
        
        public int MSV_CostValue1;
        
        public int MSV_CostType2;
        
        public int MSV_CostValue2;
        
        public int MSV_LauncherLogic;
        
        public int MSV_LauncherParam1;
        
        public int MSV_LauncherParam2;
        
        public int MSV_LauncherParam3;
        
        public int MSV_ProjectileLogic;
        
        public int MSV_ProjectileTime;
        
        public float MSV_ProjectileSpeed;
        
        public int MSV_ProjectileEffectTime;
        
        public int MSV_ProjectileEffectCount;
        
        public int MSV_ProjectileParam1;
        
        public int MSV_ProjectileParam2;
        
        public int MSV_ProjectileParam3;
        
        public int MSV_ProjectileEffectID;
        
        public int MSV_ProjectileDieEffectID;
        
        public int MSV_ProjectileFly1EffectID;
        
        public int MSV_ProjectileFly2EffectID;
        
        public int MSV_AreaLogic;
        
        public int MSV_AreaTarCheck;
        
        public int MSV_AreaTarCnt;
        
        public int MSV_AreaParam1;
        
        public int MSV_AreaParam2;
        
        public int MSV_AreaParam3;
        
        public int MSV_EffectType;
        
        public int MSV_EffectLogic;
        
        public int MSV_EffectParam1;
        
        public int MSV_EffectParam2;
        
        public int MSV_EffectParam3;
        
        public int MSV_EffectCalculation;
        
        public int MSV_EffectTransform;
        
        public int MSV_EffectBeatBack;
        
        public int MSV_BeaBackSrcCond;
        
        public int MSV_BeatBackTarCond;
        
        public int MSV_BeatBackType;
        
        public int MSV_BeatBackDir;
        
        public float MSV_BeatBackOffsetDis;
        
        public float MSV_BeatBackFixedDis;
        
        public float MSV_BeatBackMoveTime;
        
        public float MSV_BeatBackLifeTime;
        
        public int MSV_AnimID;
        
        public int MSV_Priority;
        
        public float MSV_SkillDis;
        
        public int MSV_SkillMoveDir;
        
        public int MSV_CastType;
        
        public object Clone()
        {
            return this.MemberwiseClone();;
        }
    }
    
    public class Tableskilldata : XWorld.DataConfig.TableBase
    {
        
        public List<skilldata> m_configList = new List<skilldata>();
        
        public void LoadData(XWorld.DataConfig.skilldata codeValue)
        {
            m_configList.Add(codeValue);
        }
        
        public int GetRowCount()
        {
            return 75;
        }
        
        public int GetDataCount()
        {
            if (m_configList == null)
            {
                return 0;
            }
            return m_configList.Count;
        }
        
        public skilldata GetData(int rowIdx)
        {
            if (m_configList != null && rowIdx >= 0 && rowIdx < m_configList.Count)
            {
                return m_configList[rowIdx];
            }
            return null;
        }
        
        public override void LoadData(string content)
        {
            string[] values = content.Split("\r"[0]);
            for (int i = 2; (i < values.Length); i = (i + 1))
            {
                skilldata data = new skilldata();
                int j = 0;
                string[] subValues = values[i].TrimStart('\n').Split(ClientConfigManager.CMD_STRING, StringSplitOptions.None);
                if (subValues != null && subValues.Length == GetRowCount())
                {
                    data.SkillID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.Des = (subValues[j]);
                    j = j + 1;
                    data.MSV_SkillType = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_SrcCheck = ClientConfigManager.ToSingle(subValues[j]);
                    j = j + 1;
                    data.MSV_TarCheck = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_BaseSkillID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_SkillAttr = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_TriggerType = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_TriggerCheck = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_TriggerNotify = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_TriggerDataID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_TriggerValue = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_TriggerProbability = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_SpellLogic = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_SpellParam1 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_SpellParam2 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_SpellParam3 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_TarSeclect = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_TarType = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_TarLogic = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_Range = ClientConfigManager.ToSingle(subValues[j]);
                    j = j + 1;
                    data.MSV_Angle = ClientConfigManager.ToSingle(subValues[j]);
                    j = j + 1;
                    data.MSV_LockTime = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_LastTime = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_EffectTime = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_EffectCount = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_CDGroup = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_CDTime = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_CostType1 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_CostValue1 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_CostType2 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_CostValue2 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_LauncherLogic = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_LauncherParam1 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_LauncherParam2 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_LauncherParam3 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_ProjectileLogic = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_ProjectileTime = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_ProjectileSpeed = ClientConfigManager.ToSingle(subValues[j]);
                    j = j + 1;
                    data.MSV_ProjectileEffectTime = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_ProjectileEffectCount = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_ProjectileParam1 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_ProjectileParam2 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_ProjectileParam3 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_ProjectileEffectID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_ProjectileDieEffectID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_ProjectileFly1EffectID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_ProjectileFly2EffectID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_AreaLogic = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_AreaTarCheck = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_AreaTarCnt = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_AreaParam1 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_AreaParam2 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_AreaParam3 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_EffectType = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_EffectLogic = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_EffectParam1 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_EffectParam2 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_EffectParam3 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_EffectCalculation = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_EffectTransform = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_EffectBeatBack = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_BeaBackSrcCond = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_BeatBackTarCond = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_BeatBackType = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_BeatBackDir = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_BeatBackOffsetDis = ClientConfigManager.ToSingle(subValues[j]);
                    j = j + 1;
                    data.MSV_BeatBackFixedDis = ClientConfigManager.ToSingle(subValues[j]);
                    j = j + 1;
                    data.MSV_BeatBackMoveTime = ClientConfigManager.ToSingle(subValues[j]);
                    j = j + 1;
                    data.MSV_BeatBackLifeTime = ClientConfigManager.ToSingle(subValues[j]);
                    j = j + 1;
                    data.MSV_AnimID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_Priority = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_SkillDis = ClientConfigManager.ToSingle(subValues[j]);
                    j = j + 1;
                    data.MSV_SkillMoveDir = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MSV_CastType = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    m_configList.Add(data);
                }
            }
        }
    }
}
