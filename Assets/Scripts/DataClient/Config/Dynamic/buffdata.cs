// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 2.0.50727.1433
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace XWorld.DataConfig
{
    using UnityEngine;
    using System.Collections.Generic;
    using System;
    
    
    public class buffdata : System.ICloneable
    {
        
        public int BuffID;
        
        public int MBV_NameID;
        
        public int MBV_TipsID;
        
        public int MBV_BuffType;
        
        public int MBV_BuffAttr;
        
        public int MBV_BuffRemove;
        
        public int MBV_BuffInummue;
        
        public int MBV_BuffCleanUp;
        
        public int MBV_BuffCleanUpGroup;
        
        public int MBV_BuffState;
        
        public int MBV_AttrValue;
        
        public int MBV_LayerCnt;
        
        public int MBV_DurationTime;
        
        public int MBV_BuffSkill;
        
        public int MBV_BuffSkillLv;
        
        public int MBV_BuffLogic;
        
        public int MBV_BuffSkillUserData;
        
        public int MBV_BuffLogicParam1;
        
        public int MBV_BuffLogicParam2;
        
        public int MBV_BuffLogicParam3;
        
        public int MBV_EffectID;
        
        public int MBV_EffectSurface;
        
        public int MBV_EffectAddID;
        
        public int MBV_EffectAddTime;
        
        public int MBV_EffectRemoveID;
        
        public int MBV_EffectRemoveTime;
        
        public int MBV_IconID;
        
        public object Clone()
        {
            return this.MemberwiseClone();;
        }
    }
    
    public class Tablebuffdata : XWorld.DataConfig.TableBase
    {
        
        public List<buffdata> m_configList = new List<buffdata>();
        
        public void LoadData(XWorld.DataConfig.buffdata codeValue)
        {
            m_configList.Add(codeValue);
        }
        
        public int GetRowCount()
        {
            return 27;
        }
        
        public int GetDataCount()
        {
            if (m_configList == null)
            {
                return 0;
            }
            return m_configList.Count;
        }
        
        public buffdata GetData(int rowIdx)
        {
            if (m_configList != null && rowIdx >= 0 && rowIdx < m_configList.Count)
            {
                return m_configList[rowIdx];
            }
            return null;
        }
        
        public override void LoadData(string content)
        {
            string[] values = content.Split("\r"[0]);
            for (int i = 2; (i < values.Length); i = (i + 1))
            {
                buffdata data = new buffdata();
                int j = 0;
                string[] subValues = values[i].TrimStart('\n').Split(ClientConfigManager.CMD_STRING, StringSplitOptions.None);
                if (subValues != null && subValues.Length == GetRowCount())
                {
                    data.BuffID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_NameID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_TipsID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_BuffType = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_BuffAttr = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_BuffRemove = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_BuffInummue = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_BuffCleanUp = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_BuffCleanUpGroup = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_BuffState = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_AttrValue = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_LayerCnt = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_DurationTime = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_BuffSkill = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_BuffSkillLv = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_BuffLogic = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_BuffSkillUserData = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_BuffLogicParam1 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_BuffLogicParam2 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_BuffLogicParam3 = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_EffectID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_EffectSurface = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_EffectAddID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_EffectAddTime = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_EffectRemoveID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_EffectRemoveTime = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    data.MBV_IconID = ClientConfigManager.ToInt32(subValues[j]);
                    j = j + 1;
                    m_configList.Add(data);
                }
            }
        }
    }
}
